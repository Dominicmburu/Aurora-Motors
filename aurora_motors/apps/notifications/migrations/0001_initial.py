# Generated by Django 5.2.4 on 2025-07-07 11:30

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('webhook', 'Webhook'), ('slack', 'Slack')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('config', models.JSONField(default=dict)),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=60)),
                ('rate_limit_per_hour', models.PositiveIntegerField(default=1000)),
                ('rate_limit_per_day', models.PositiveIntegerField(default=10000)),
                ('total_sent', models.PositiveIntegerField(default=0)),
                ('total_delivered', models.PositiveIntegerField(default=0)),
                ('total_failed', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Notification Channel',
                'verbose_name_plural': 'Notification Channels',
                'ordering': ['channel_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('body', models.TextField()),
                ('html_body', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('read', 'Read')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('context_data', models.JSONField(blank=True, default=dict)),
                ('delivery_data', models.JSONField(blank=True, default=dict)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('max_retries', models.PositiveIntegerField(default=3)),
                ('next_retry_at', models.DateTimeField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=100)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(max_length=20)),
                ('response_code', models.CharField(blank=True, max_length=10)),
                ('response_message', models.TextField(blank=True)),
                ('sent_at', models.DateTimeField()),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notificationchannel')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notification')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_enabled', models.BooleanField(default=True)),
                ('email_booking_confirmations', models.BooleanField(default=True)),
                ('email_booking_reminders', models.BooleanField(default=True)),
                ('email_contract_notifications', models.BooleanField(default=True)),
                ('email_document_notifications', models.BooleanField(default=True)),
                ('email_marketing', models.BooleanField(default=False)),
                ('sms_enabled', models.BooleanField(default=False)),
                ('sms_booking_reminders', models.BooleanField(default=False)),
                ('sms_urgent_notifications', models.BooleanField(default=False)),
                ('push_enabled', models.BooleanField(default=True)),
                ('push_booking_updates', models.BooleanField(default=True)),
                ('push_document_updates', models.BooleanField(default=True)),
                ('in_app_enabled', models.BooleanField(default=True)),
                ('in_app_all_notifications', models.BooleanField(default=True)),
                ('digest_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily Digest'), ('weekly', 'Weekly Digest'), ('never', 'Never')], default='immediate', max_length=20)),
                ('quiet_hours_enabled', models.BooleanField(default=False)),
                ('quiet_hours_start', models.TimeField(blank=True, null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Preference',
                'verbose_name_plural': 'Notification Preferences',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('template_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App Notification')], max_length=20)),
                ('trigger_type', models.CharField(choices=[('booking_confirmation', 'Booking Confirmation'), ('booking_reminder', 'Booking Reminder'), ('contract_signature', 'Contract Signature'), ('document_approval', 'Document Approval'), ('document_rejection', 'Document Rejection'), ('document_expiry', 'Document Expiry'), ('vehicle_pickup', 'Vehicle Pickup'), ('vehicle_return', 'Vehicle Return'), ('payment_due', 'Payment Due'), ('system_maintenance', 'System Maintenance'), ('welcome', 'Welcome Message'), ('password_reset', 'Password Reset')], max_length=50)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('email_body', models.TextField(blank=True)),
                ('email_html_body', models.TextField(blank=True)),
                ('sms_body', models.TextField(blank=True)),
                ('push_title', models.CharField(blank=True, max_length=100)),
                ('push_body', models.TextField(blank=True)),
                ('in_app_title', models.CharField(blank=True, max_length=100)),
                ('in_app_body', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_required', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'ordering': ['trigger_type', 'template_type'],
                'unique_together': {('trigger_type', 'template_type')},
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='notifications.notificationtemplate'),
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('queue_type', models.CharField(choices=[('immediate', 'Immediate'), ('high', 'High Priority'), ('normal', 'Normal Priority'), ('low', 'Low Priority'), ('digest', 'Digest')], default='normal', max_length=20)),
                ('priority_score', models.IntegerField(default=0)),
                ('is_processing', models.BooleanField(default=False)),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('processing_worker', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notification', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='queue_item', to='notifications.notification')),
            ],
            options={
                'verbose_name': 'Notification Queue Item',
                'verbose_name_plural': 'Notification Queue Items',
                'ordering': ['-priority_score', 'created_at'],
                'indexes': [models.Index(fields=['queue_type', 'is_processing'], name='notificatio_queue_t_b652e8_idx'), models.Index(fields=['priority_score', 'created_at'], name='notificatio_priorit_4ccc07_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'status'], name='notificatio_recipie_e285de_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['status', 'scheduled_at'], name='notificatio_status_a9c93f_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['template', 'created_at'], name='notificatio_templat_6821fb_idx'),
        ),
    ]
