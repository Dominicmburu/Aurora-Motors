# Generated by Django 5.2.4 on 2025-07-07 11:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VehicleBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='vehicles/brands/')),
                ('country', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Vehicle Brand',
                'verbose_name_plural': 'Vehicle Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Vehicle Category',
                'verbose_name_plural': 'Vehicle Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VehicleFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('feature_type', models.CharField(choices=[('safety', 'Safety'), ('comfort', 'Comfort'), ('technology', 'Technology'), ('performance', 'Performance'), ('convenience', 'Convenience')], max_length=20)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Vehicle Feature',
                'verbose_name_plural': 'Vehicle Features',
                'ordering': ['feature_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('model', models.CharField(max_length=100)),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)])),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic'), ('cvt', 'CVT')], max_length=20)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('hybrid', 'Hybrid'), ('electric', 'Electric')], max_length=20)),
                ('engine_size', models.DecimalField(decimal_places=1, help_text='Engine size in liters', max_digits=3)),
                ('seats', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('doors', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(10)])),
                ('registration_number', models.CharField(max_length=20, unique=True)),
                ('vin', models.CharField(max_length=17, unique=True, verbose_name='VIN')),
                ('color', models.CharField(max_length=50)),
                ('mileage', models.PositiveIntegerField(help_text='Current mileage in kilometers')),
                ('condition', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], default='good', max_length=20)),
                ('daily_rate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('weekly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('monthly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('security_deposit', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('available', 'Available'), ('rented', 'Rented'), ('maintenance', 'Under Maintenance'), ('out_of_service', 'Out of Service')], default='available', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('last_service_date', models.DateField(blank=True, null=True)),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('last_service_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('next_service_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('insurance_company', models.CharField(blank=True, max_length=200)),
                ('insurance_policy', models.CharField(blank=True, max_length=100)),
                ('insurance_expiry', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes')),
                ('location', models.CharField(blank=True, max_length=200)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='vehicles.vehiclebrand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='vehicles.vehiclecategory')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VehicleFeatureAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='Optional feature value', max_length=100)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vehicles.vehiclefeature')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vehicles.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Feature Assignment',
                'verbose_name_plural': 'Vehicle Feature Assignments',
                'unique_together': {('vehicle', 'feature')},
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='features',
            field=models.ManyToManyField(blank=True, related_name='vehicles', through='vehicles.VehicleFeatureAssignment', to='vehicles.vehiclefeature'),
        ),
        migrations.CreateModel(
            name='VehicleImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to='vehicles/images/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='vehicles.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Image',
                'verbose_name_plural': 'Vehicle Images',
                'ordering': ['sort_order', '-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='VehicleMaintenanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('maintenance_type', models.CharField(choices=[('service', 'Regular Service'), ('repair', 'Repair'), ('inspection', 'Inspection'), ('cleaning', 'Cleaning'), ('tire_change', 'Tire Change'), ('oil_change', 'Oil Change'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('mileage_at_service', models.PositiveIntegerField()),
                ('service_date', models.DateField()),
                ('next_service_date', models.DateField(blank=True, null=True)),
                ('next_service_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('service_provider', models.CharField(max_length=200)),
                ('service_provider_contact', models.CharField(blank=True, max_length=100)),
                ('invoice_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_maintenance', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='vehicles.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Maintenance Record',
                'verbose_name_plural': 'Vehicle Maintenance Records',
                'ordering': ['-service_date'],
            },
        ),
        migrations.CreateModel(
            name='VehicleReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('cleanliness_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comfort_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('performance_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_approved', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='bookings.booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_reviews', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='vehicles.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Review',
                'verbose_name_plural': 'Vehicle Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['status', 'is_active'], name='vehicles_ve_status_3d5291_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['brand', 'model'], name='vehicles_ve_brand_i_de8e0e_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['category'], name='vehicles_ve_categor_0da71b_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['daily_rate'], name='vehicles_ve_daily_r_6b509e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclereview',
            unique_together={('vehicle', 'user', 'booking')},
        ),
    ]
